[tool.poetry]
name = "agym"
version = "0.1.0"
description = ""
authors = ["Anton Novikov <thescir@yandex.ru>"]

packages = [
    {include = "agym"},
]

[tool.poetry.dependencies]
python = "3.8.1"
pygame = "^2.1.2"
numpy = "^1.22.1"
pydantic = "^1.9.0"
envs = {path = "./envs", develop = true}
geometry = {path = "./geometry", develop = true}
custom_queue = {path = "./custom_queue", develop = true}
timeprofiler = {path = "./timeprofiler", develop = true}

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
mypy = "^0.991"
isort = "^5.10.1"
black = "^22.10.0"
py-spy = "^0.3.14"
Flake8-pyproject = "^1.2.2"
autoflake = "^2.0.0"

[tool.mypy]
check_untyped_defs = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
show_column_numbers = true
show_error_context = true

[tool.flake8]
ignore = [
    "E501",
    "E203",
    "E741",
    "W503",
    "W504",
]
per-file-ignores = [
    '__init__.py:F401,F403',
    'conftest.py:F401,F403',
    'tests/levels/compose.py:F401,F403',
]
max-line-length = 80
count = true

[tool.autoflake]
imports = [
    # side-packages
    "pytest",
    # custom packages
    "custom_queue",
    "timeprofiler",
    "geometry",
    "envs",
    "tests",
    "agym",
]

[[tool.mypy.overrides]]
module = [
    "custom_queue",
    "timeprofiler",
    "geometry.*",
    "envs.*",
]
ignore_missing_imports = true
follow_imports = "skip"

[tool.black]
line-length = 80

[tool.isort]
line_length = 80
profile = "black"

[tool.pytest.ini_options]
markers = """
    gui: Run gui tests

    breakout: Run tests connected with breakout

    collisions: Run collision detection tests
    intersections: Run intersection detection tests

    geom: Run tests connected with geometry primitives

    circle: Run tests connected with circle
    triangle: Run tests connected with triangle
    rectangle: Run tests connected with rectangle

    segment: Run tests connected with segment
    line: Run tests connected with line

    platform: Run tests connected with platform's logic
    ball: Run tests connected with ball's logic
    wall: Run tests connected with wall's logic
    block: Run tests connected with block's logic

    kdtree: Run tests connected with kdtree

    score: Run tests for spliting kdtree scores
    node: Run tests for kdtree node
    tree: Run tests for kdtree class
"""

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
